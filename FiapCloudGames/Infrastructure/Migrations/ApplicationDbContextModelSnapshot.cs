// <auto-generated />
using System;
using Infrastructure.Persistense;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CartGame", b =>
                {
                    b.Property<int>("CartsId")
                        .HasColumnType("INT");

                    b.Property<int>("GamesId")
                        .HasColumnType("INT");

                    b.HasKey("CartsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("CartGame", (string)null);
                });

            modelBuilder.Entity("Core.Entity.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Core.Entity.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Game", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2025, 6, 1, 1, 50, 34, 833, DateTimeKind.Local).AddTicks(5311),
                            Description = "A vast action RPG world",
                            Genre = "RPG",
                            IsActive = true,
                            Name = "Elden Ring",
                            Price = 299.99m
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2025, 6, 1, 1, 50, 34, 833, DateTimeKind.Local).AddTicks(5314),
                            Description = "Farming and life simulator",
                            Genre = "Simulation",
                            IsActive = true,
                            Name = "Stardew Valley",
                            Price = 39.99m
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2025, 6, 1, 1, 50, 34, 833, DateTimeKind.Local).AddTicks(5315),
                            Description = "Roguelike action-packed dungeon crawler",
                            Genre = "Action",
                            IsActive = true,
                            Name = "Hades",
                            Price = 79.99m
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2025, 6, 1, 1, 50, 34, 833, DateTimeKind.Local).AddTicks(5317),
                            Description = "Challenging platformer with a touching story",
                            Genre = "Platformer",
                            IsActive = true,
                            Name = "Celeste",
                            Price = 49.99m
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2025, 6, 1, 1, 50, 34, 833, DateTimeKind.Local).AddTicks(5318),
                            Description = "Open-world fantasy RPG with deep narrative",
                            Genre = "RPG",
                            IsActive = true,
                            Name = "The Witcher 3",
                            Price = 119.99m
                        });
                });

            modelBuilder.Entity("Core.Entity.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Library", (string)null);
                });

            modelBuilder.Entity("Core.Entity.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("NUMERIC(3,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("GameLibrary", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("INT");

                    b.Property<int>("LibrariesId")
                        .HasColumnType("INT");

                    b.HasKey("GamesId", "LibrariesId");

                    b.HasIndex("LibrariesId");

                    b.ToTable("LibraryGame", (string)null);
                });

            modelBuilder.Entity("GameSale", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("INT");

                    b.Property<int>("SalesId")
                        .HasColumnType("INT");

                    b.HasKey("GamesId", "SalesId");

                    b.HasIndex("SalesId");

                    b.ToTable("GameSale", (string)null);
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(254)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("UserType")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreationDate = new DateTime(2025, 6, 1, 1, 50, 34, 833, DateTimeKind.Local).AddTicks(5165),
                            Email = "admin@admin.com.br",
                            IsActive = true,
                            Password = "AQAAAAIAAYagAAAAEBPYC7x7jttzvV1944u+w36Ol6LKArJpGosFZLDgLkp+eMK2KTWetfUMpt2QwHPprQ==",
                            UserName = "admin",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("CartGame", b =>
                {
                    b.HasOne("Core.Entity.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.Cart", b =>
                {
                    b.HasOne("User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Core.Entity.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.Library", b =>
                {
                    b.HasOne("User", "User")
                        .WithOne("Library")
                        .HasForeignKey("Core.Entity.Library", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.Sale", b =>
                {
                    b.OwnsOne("Core.ValueObjects.DateRange", "Period", b1 =>
                        {
                            b1.Property<int>("SaleId")
                                .HasColumnType("INT");

                            b1.Property<DateTime>("End")
                                .HasColumnType("TIMESTAMP")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("TIMESTAMP")
                                .HasColumnName("StartDate");

                            b1.HasKey("SaleId");

                            b1.ToTable("Sale");

                            b1.WithOwner()
                                .HasForeignKey("SaleId");
                        });

                    b.Navigation("Period")
                        .IsRequired();
                });

            modelBuilder.Entity("GameLibrary", b =>
                {
                    b.HasOne("Core.Entity.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.Library", null)
                        .WithMany()
                        .HasForeignKey("LibrariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameSale", b =>
                {
                    b.HasOne("Core.Entity.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.Sale", null)
                        .WithMany()
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Library")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
